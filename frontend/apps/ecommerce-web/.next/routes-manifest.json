{
  "version": 3,
  "pages404": true,
  "caseSensitive": false,
  "basePath": "",
  "redirects": [
    {
      "source": "/:path+/",
      "destination": "/:path+",
      "internal": true,
      "statusCode": 308,
      "regex": "^(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))/$"
    }
  ],
  "headers": [
    {
      "source": "/(.*)",
      "headers": [
        {
          "key": "X-Frame-Options",
          "value": "DENY"
        },
        {
          "key": "Content-Security-Policy",
          "value": "default-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-eval' 'unsafe-inline'; img-src 'self' data: http: https:; font-src 'self' data:; connect-src 'self' http://localhost:* ws://localhost:*;"
        }
      ],
      "regex": "^(?:/(.*))(?:/)?$"
    }
  ],
  "dynamicRoutes": [
    {
      "page": "/product/[id]",
      "regex": "^/product/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/product/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/traditional/order/[id]",
      "regex": "^/traditional/order/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/traditional/order/(?<nxtPid>[^/]+?)(?:/)?$"
    }
  ],
  "staticRoutes": [
    {
      "page": "/",
      "regex": "^/(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/(?:/)?$"
    },
    {
      "page": "/404",
      "regex": "^/404(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/404(?:/)?$"
    },
    {
      "page": "/account",
      "regex": "^/account(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/account(?:/)?$"
    },
    {
      "page": "/admin/features",
      "regex": "^/admin/features(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/admin/features(?:/)?$"
    },
    {
      "page": "/auth/login",
      "regex": "^/auth/login(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/auth/login(?:/)?$"
    },
    {
      "page": "/auth/register",
      "regex": "^/auth/register(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/auth/register(?:/)?$"
    },
    {
      "page": "/cart",
      "regex": "^/cart(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/cart(?:/)?$"
    },
    {
      "page": "/categories",
      "regex": "^/categories(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/categories(?:/)?$"
    },
    {
      "page": "/checkout",
      "regex": "^/checkout(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/checkout(?:/)?$"
    },
    {
      "page": "/contact",
      "regex": "^/contact(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/contact(?:/)?$"
    },
    {
      "page": "/order-history",
      "regex": "^/order\\-history(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/order\\-history(?:/)?$"
    },
    {
      "page": "/products",
      "regex": "^/products(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/products(?:/)?$"
    },
    {
      "page": "/status",
      "regex": "^/status(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/status(?:/)?$"
    },
    {
      "page": "/subscriptions",
      "regex": "^/subscriptions(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/subscriptions(?:/)?$"
    },
    {
      "page": "/track-order",
      "regex": "^/track\\-order(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/track\\-order(?:/)?$"
    },
    {
      "page": "/traditional",
      "regex": "^/traditional(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/traditional(?:/)?$"
    },
    {
      "page": "/traditional/history",
      "regex": "^/traditional/history(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/traditional/history(?:/)?$"
    }
  ],
  "dataRoutes": [],
  "rsc": {
    "header": "RSC",
    "varyHeader": "RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Router-Segment-Prefetch",
    "prefetchHeader": "Next-Router-Prefetch",
    "didPostponeHeader": "x-nextjs-postponed",
    "contentTypeHeader": "text/x-component",
    "suffix": ".rsc",
    "prefetchSuffix": ".prefetch.rsc",
    "prefetchSegmentHeader": "Next-Router-Segment-Prefetch",
    "prefetchSegmentSuffix": ".segment.rsc",
    "prefetchSegmentDirSuffix": ".segments"
  },
  "rewriteHeaders": {
    "pathHeader": "x-nextjs-rewritten-path",
    "queryHeader": "x-nextjs-rewritten-query"
  },
  "rewrites": []
}
import { Injectable, NotFoundException } from '@nestjs/common';
import { db } from '../database';
import { customTemplateDimensions } from '../../../../../shared/schema';
import { eq } from 'drizzle-orm';

@Injectable()
export class SimpleTemplateService {
  async findAll() {
    try {
      const results = await db.select()
        .from(customTemplateDimensions)
        .where(eq(customTemplateDimensions.isActive, true));

      return results.map((template) => ({
        id: template.id,
        name: template.name,
        description: template.description,
        paperSize: template.paperSize,
        paperWidth: template.paperWidth,
        paperHeight: template.paperHeight,
        labelWidth: template.labelWidth,
        labelHeight: template.labelHeight,
        horizontalCount: template.horizontalCount,
        verticalCount: template.verticalCount,
        createdAt: template.createdAt,
        updatedAt: template.updatedAt,
        isActive: template.isActive
      }));
    } catch (error) {
      throw error;
    }
  }

  async findOne(id: number) {
    const result = await db.select()
      .from(customTemplateDimensions)
      .where(eq(customTemplateDimensions.id, id))
      .limit(1);
    
    if (!result || result.length === 0) {
      throw new NotFoundException(`Template with ID ${id} not found`);
    }
    
    const template = result[0];
    return {
      id: template.id,
      name: template.name,
      description: template.description,
      paperSize: template.paperSize,
      paperWidth: template.paperWidth,
      paperHeight: template.paperHeight,
      labelWidth: template.labelWidth,
      labelHeight: template.labelHeight,
      horizontalCount: template.horizontalCount,
      verticalCount: template.verticalCount,
      createdAt: template.createdAt,
      updatedAt: template.updatedAt,
      isActive: template.isActive
    };
  }

  async create(templateData: any) {
    const newTemplate = await db.insert(customTemplateDimensions).values({
      name: templateData.name,
      description: templateData.description || 'New template',
      paperSize: 'A4',
      paperWidth: 210,
      paperHeight: 297,
      labelWidth: 70,
      labelHeight: 37,
      horizontalCount: 3,
      verticalCount: 8,
      marginTop: 15,
      marginBottom: 15,
      marginLeft: 5,
      marginRight: 5,
      horizontalGap: 2.5,
      verticalGap: 0,
      cornerRadius: 0,
      isActive: true,
      createdBy: 1,
      companyId: 1,
      branchId: 1
    }).returning();
    
    return this.findOne(newTemplate[0].id);
  }

  async update(id: number, updateData: any) {
    await db.update(customTemplateDimensions)
      .set({
        name: updateData.name,
        description: updateData.description,
        isActive: updateData.isActive,
        updatedAt: new Date()
      })
      .where(eq(customTemplateDimensions.id, id));
    
    return this.findOne(id);
  }

  async remove(id: number) {
    const result = await db.delete(customTemplateDimensions)
      .where(eq(customTemplateDimensions.id, id))
      .returning();
    
    if (!result || result.length === 0) {
      throw new NotFoundException(`Template with ID ${id} not found`);
    }
    
    return { message: 'Template deleted successfully' };
  }
}
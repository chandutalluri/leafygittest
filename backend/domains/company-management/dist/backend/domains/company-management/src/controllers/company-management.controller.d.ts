import { CompanyManagementService } from '../services/company-management.service';
import { CreateCompanyDto, UpdateCompanyDto, CreateBranchDto, UpdateBranchDto } from '../dto/company-management.dto';
export declare class CompanyManagementController {
    private readonly companyManagementService;
    constructor(companyManagementService: CompanyManagementService);
    getHealth(): {
        status: string;
        service: string;
        timestamp: string;
    };
    createCompany(createCompanyDto: CreateCompanyDto): Promise<{
        id: number;
        name: string;
        created_at: Date;
        updated_at: Date;
        slug: string;
        description: string;
        logo: string;
        website: string;
        email: string;
        phone: string;
        address: string;
        city: string;
        state: string;
        country: string;
        postal_code: string;
        tax_id: string;
        registration_number: string;
        fssai_license: string;
        gst_number: string;
        industry: string;
        founded_year: number;
        employee_count: number;
        annual_revenue: string;
        settings: unknown;
        is_active: boolean;
    }>;
    getAllCompanies(): Promise<{
        id: number;
        name: string;
        slug: string;
        description: string;
        logo: string;
        website: string;
        email: string;
        phone: string;
        address: string;
        city: string;
        state: string;
        country: string;
        postal_code: string;
        tax_id: string;
        registration_number: string;
        fssai_license: string;
        gst_number: string;
        industry: string;
        founded_year: number;
        employee_count: number;
        annual_revenue: string;
        settings: unknown;
        is_active: boolean;
        created_at: Date;
        updated_at: Date;
    }[]>;
    getCompanyById(id: string): Promise<{
        id: number;
        name: string;
        slug: string;
        description: string;
        logo: string;
        website: string;
        email: string;
        phone: string;
        address: string;
        city: string;
        state: string;
        country: string;
        postal_code: string;
        tax_id: string;
        registration_number: string;
        fssai_license: string;
        gst_number: string;
        industry: string;
        founded_year: number;
        employee_count: number;
        annual_revenue: string;
        settings: unknown;
        is_active: boolean;
        created_at: Date;
        updated_at: Date;
    }>;
    updateCompany(id: string, updateCompanyDto: UpdateCompanyDto): Promise<{
        id: number;
        name: string;
        slug: string;
        description: string;
        logo: string;
        website: string;
        email: string;
        phone: string;
        address: string;
        city: string;
        state: string;
        country: string;
        postal_code: string;
        tax_id: string;
        registration_number: string;
        fssai_license: string;
        gst_number: string;
        industry: string;
        founded_year: number;
        employee_count: number;
        annual_revenue: string;
        settings: unknown;
        is_active: boolean;
        created_at: Date;
        updated_at: Date;
    }>;
    deleteCompany(id: string): Promise<{
        message: string;
    }>;
    getCompanyHierarchy(companyId: string): Promise<{
        company: {
            id: number;
            name: string;
            slug: string;
            description: string;
            logo: string;
            website: string;
            email: string;
            phone: string;
            address: string;
            city: string;
            state: string;
            country: string;
            postal_code: string;
            tax_id: string;
            registration_number: string;
            fssai_license: string;
            gst_number: string;
            industry: string;
            founded_year: number;
            employee_count: number;
            annual_revenue: string;
            settings: unknown;
            is_active: boolean;
            created_at: Date;
            updated_at: Date;
        };
        branches: {
            id: number;
            company_id: number;
            name: string;
            code: string;
            address: string;
            city: string;
            state: string;
            country: string;
            postal_code: string;
            latitude: string;
            longitude: string;
            phone: string;
            email: string;
            manager_name: string;
            operating_hours: unknown;
            delivery_radius: string;
            settings: unknown;
            is_active: boolean;
            created_at: Date;
            updated_at: Date;
        }[];
        totalBranches: number;
    }>;
    createBranch(createBranchDto: CreateBranchDto): Promise<{
        id: number;
        name: string;
        created_at: Date;
        updated_at: Date;
        email: string;
        phone: string;
        address: string;
        city: string;
        state: string;
        country: string;
        postal_code: string;
        settings: unknown;
        is_active: boolean;
        company_id: number;
        code: string;
        latitude: string;
        longitude: string;
        manager_name: string;
        operating_hours: unknown;
        delivery_radius: string;
    }>;
    getAllBranches(): Promise<{
        id: number;
        company_id: number;
        name: string;
        code: string;
        address: string;
        city: string;
        state: string;
        country: string;
        postal_code: string;
        latitude: string;
        longitude: string;
        phone: string;
        email: string;
        manager_name: string;
        operating_hours: unknown;
        delivery_radius: string;
        settings: unknown;
        is_active: boolean;
        created_at: Date;
        updated_at: Date;
    }[]>;
    getBranchById(id: string): Promise<{
        id: number;
        company_id: number;
        name: string;
        code: string;
        address: string;
        city: string;
        state: string;
        country: string;
        postal_code: string;
        latitude: string;
        longitude: string;
        phone: string;
        email: string;
        manager_name: string;
        operating_hours: unknown;
        delivery_radius: string;
        settings: unknown;
        is_active: boolean;
        created_at: Date;
        updated_at: Date;
    }>;
    updateBranch(id: string, updateBranchDto: UpdateBranchDto): Promise<{
        id: number;
        company_id: number;
        name: string;
        code: string;
        address: string;
        city: string;
        state: string;
        country: string;
        postal_code: string;
        latitude: string;
        longitude: string;
        phone: string;
        email: string;
        manager_name: string;
        operating_hours: unknown;
        delivery_radius: string;
        settings: unknown;
        is_active: boolean;
        created_at: Date;
        updated_at: Date;
    }>;
    deleteBranch(id: string): Promise<{
        message: string;
    }>;
    getBranchesByCompany(companyId: string): Promise<{
        id: number;
        company_id: number;
        name: string;
        code: string;
        address: string;
        city: string;
        state: string;
        country: string;
        postal_code: string;
        latitude: string;
        longitude: string;
        phone: string;
        email: string;
        manager_name: string;
        operating_hours: unknown;
        delivery_radius: string;
        settings: unknown;
        is_active: boolean;
        created_at: Date;
        updated_at: Date;
    }[]>;
}
